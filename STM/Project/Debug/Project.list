
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d18  08002d18  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002d18  08002d18  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d18  08002d18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  08002d94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002d94  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c989  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002139  00000000  00000000  0002ca26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001832a  00000000  00000000  0002ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c661  00000000  00000000  000482a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d6c  00000000  00000000  00054903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc66f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000290c  00000000  00000000  000dc6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ce0 	.word	0x08002ce0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002ce0 	.word	0x08002ce0

0800014c <subKeyProcess>:
int TimeOutForKeyPress =  100;
int TimeOutForKeyPress2 = 100;
int TimeOutForKeyPress3 = 100;
int TimeOutForKeyPress4 = 100;

void subKeyProcess(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000090 	.word	0x20000090

08000164 <getKeyInput>:
void getKeyInput(){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000168:	4b1e      	ldr	r3, [pc, #120]	; (80001e4 <getKeyInput+0x80>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a1e      	ldr	r2, [pc, #120]	; (80001e8 <getKeyInput+0x84>)
 800016e:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000170:	4b1e      	ldr	r3, [pc, #120]	; (80001ec <getKeyInput+0x88>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a1b      	ldr	r2, [pc, #108]	; (80001e4 <getKeyInput+0x80>)
 8000176:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000178:	2102      	movs	r1, #2
 800017a:	481d      	ldr	r0, [pc, #116]	; (80001f0 <getKeyInput+0x8c>)
 800017c:	f001 fa0e 	bl	800159c <HAL_GPIO_ReadPin>
 8000180:	4603      	mov	r3, r0
 8000182:	461a      	mov	r2, r3
 8000184:	4b19      	ldr	r3, [pc, #100]	; (80001ec <getKeyInput+0x88>)
 8000186:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <getKeyInput+0x80>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b17      	ldr	r3, [pc, #92]	; (80001ec <getKeyInput+0x88>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	d125      	bne.n	80001e0 <getKeyInput+0x7c>
 8000194:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <getKeyInput+0x80>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <getKeyInput+0x84>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	429a      	cmp	r2, r3
 800019e:	d11f      	bne.n	80001e0 <getKeyInput+0x7c>
    if (KeyReg2 != KeyReg3){
 80001a0:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <getKeyInput+0x84>)
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	4b13      	ldr	r3, [pc, #76]	; (80001f4 <getKeyInput+0x90>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	429a      	cmp	r2, r3
 80001aa:	d00d      	beq.n	80001c8 <getKeyInput+0x64>
      KeyReg3 = KeyReg2;
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <getKeyInput+0x84>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a10      	ldr	r2, [pc, #64]	; (80001f4 <getKeyInput+0x90>)
 80001b2:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <getKeyInput+0x90>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d111      	bne.n	80001e0 <getKeyInput+0x7c>
        TimeOutForKeyPress = 100;
 80001bc:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <getKeyInput+0x94>)
 80001be:	2264      	movs	r2, #100	; 0x64
 80001c0:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 80001c2:	f7ff ffc3 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 80001c6:	e00b      	b.n	80001e0 <getKeyInput+0x7c>
       TimeOutForKeyPress --;
 80001c8:	4b0b      	ldr	r3, [pc, #44]	; (80001f8 <getKeyInput+0x94>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	3b01      	subs	r3, #1
 80001ce:	4a0a      	ldr	r2, [pc, #40]	; (80001f8 <getKeyInput+0x94>)
 80001d0:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <getKeyInput+0x94>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d102      	bne.n	80001e0 <getKeyInput+0x7c>
          KeyReg3 = NORMAL_STATE;
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <getKeyInput+0x90>)
 80001dc:	2201      	movs	r2, #1
 80001de:	601a      	str	r2, [r3, #0]
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000004 	.word	0x20000004
 80001e8:	20000008 	.word	0x20000008
 80001ec:	20000000 	.word	0x20000000
 80001f0:	40010800 	.word	0x40010800
 80001f4:	2000000c 	.word	0x2000000c
 80001f8:	20000030 	.word	0x20000030

080001fc <getKeyInput2>:


void getKeyInput2(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	  KeyReg6 = KeyReg5;
 8000200:	4b1f      	ldr	r3, [pc, #124]	; (8000280 <getKeyInput2+0x84>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1f      	ldr	r2, [pc, #124]	; (8000284 <getKeyInput2+0x88>)
 8000206:	6013      	str	r3, [r2, #0]
	  KeyReg5 = KeyReg4;
 8000208:	4b1f      	ldr	r3, [pc, #124]	; (8000288 <getKeyInput2+0x8c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <getKeyInput2+0x84>)
 800020e:	6013      	str	r3, [r2, #0]
	  KeyReg4 = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 8000210:	2110      	movs	r1, #16
 8000212:	481e      	ldr	r0, [pc, #120]	; (800028c <getKeyInput2+0x90>)
 8000214:	f001 f9c2 	bl	800159c <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	461a      	mov	r2, r3
 800021c:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <getKeyInput2+0x8c>)
 800021e:	601a      	str	r2, [r3, #0]
	  if ((KeyReg5 == KeyReg4) && (KeyReg5 == KeyReg6)){
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <getKeyInput2+0x84>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <getKeyInput2+0x8c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	429a      	cmp	r2, r3
 800022a:	d126      	bne.n	800027a <getKeyInput2+0x7e>
 800022c:	4b14      	ldr	r3, [pc, #80]	; (8000280 <getKeyInput2+0x84>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b14      	ldr	r3, [pc, #80]	; (8000284 <getKeyInput2+0x88>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	429a      	cmp	r2, r3
 8000236:	d120      	bne.n	800027a <getKeyInput2+0x7e>
	    if (KeyReg6 != KeyReg7){
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <getKeyInput2+0x88>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <getKeyInput2+0x94>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	429a      	cmp	r2, r3
 8000242:	d00e      	beq.n	8000262 <getKeyInput2+0x66>
	      KeyReg7 = KeyReg6;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <getKeyInput2+0x88>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a11      	ldr	r2, [pc, #68]	; (8000290 <getKeyInput2+0x94>)
 800024a:	6013      	str	r3, [r2, #0]

	      if (KeyReg7 == PRESSED_STATE){
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <getKeyInput2+0x94>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d112      	bne.n	800027a <getKeyInput2+0x7e>
	        TimeOutForKeyPress2 = 100;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <getKeyInput2+0x98>)
 8000256:	2264      	movs	r2, #100	; 0x64
 8000258:	601a      	str	r2, [r3, #0]
	        button2_flag = 1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <getKeyInput2+0x9c>)
 800025c:	2201      	movs	r2, #1
 800025e:	601a      	str	r2, [r3, #0]
	        if (TimeOutForKeyPress2 == 0){
	          KeyReg7 = NORMAL_STATE;
	        }
	    }
	  }
}
 8000260:	e00b      	b.n	800027a <getKeyInput2+0x7e>
	       TimeOutForKeyPress2 --;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <getKeyInput2+0x98>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3b01      	subs	r3, #1
 8000268:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <getKeyInput2+0x98>)
 800026a:	6013      	str	r3, [r2, #0]
	        if (TimeOutForKeyPress2 == 0){
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <getKeyInput2+0x98>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput2+0x7e>
	          KeyReg7 = NORMAL_STATE;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <getKeyInput2+0x94>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000014 	.word	0x20000014
 8000284:	20000018 	.word	0x20000018
 8000288:	20000010 	.word	0x20000010
 800028c:	40010800 	.word	0x40010800
 8000290:	2000001c 	.word	0x2000001c
 8000294:	20000034 	.word	0x20000034
 8000298:	20000094 	.word	0x20000094

0800029c <getKeyInput3>:

void getKeyInput3(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	  KeyReg10 = KeyReg9;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <getKeyInput3+0x84>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <getKeyInput3+0x88>)
 80002a6:	6013      	str	r3, [r2, #0]
	  KeyReg9 = KeyReg8;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <getKeyInput3+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <getKeyInput3+0x84>)
 80002ae:	6013      	str	r3, [r2, #0]
	  KeyReg8 = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 80002b0:	2101      	movs	r1, #1
 80002b2:	481e      	ldr	r0, [pc, #120]	; (800032c <getKeyInput3+0x90>)
 80002b4:	f001 f972 	bl	800159c <HAL_GPIO_ReadPin>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <getKeyInput3+0x8c>)
 80002be:	601a      	str	r2, [r3, #0]
	  if ((KeyReg9 == KeyReg8) && (KeyReg9 == KeyReg10)){
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <getKeyInput3+0x84>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b18      	ldr	r3, [pc, #96]	; (8000328 <getKeyInput3+0x8c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d126      	bne.n	800031a <getKeyInput3+0x7e>
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKeyInput3+0x84>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <getKeyInput3+0x88>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d120      	bne.n	800031a <getKeyInput3+0x7e>
	    if (KeyReg10 != KeyReg11){
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <getKeyInput3+0x88>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <getKeyInput3+0x94>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d00e      	beq.n	8000302 <getKeyInput3+0x66>
	      KeyReg11 = KeyReg10;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <getKeyInput3+0x88>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <getKeyInput3+0x94>)
 80002ea:	6013      	str	r3, [r2, #0]

	      if (KeyReg11 == PRESSED_STATE){
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <getKeyInput3+0x94>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d112      	bne.n	800031a <getKeyInput3+0x7e>
	        TimeOutForKeyPress3 = 100;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <getKeyInput3+0x98>)
 80002f6:	2264      	movs	r2, #100	; 0x64
 80002f8:	601a      	str	r2, [r3, #0]
	        button3_flag = 1;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <getKeyInput3+0x9c>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	601a      	str	r2, [r3, #0]
	        if (TimeOutForKeyPress3 == 0){
	          KeyReg11 = NORMAL_STATE;
	        }
	    }
	  }
}
 8000300:	e00b      	b.n	800031a <getKeyInput3+0x7e>
	       TimeOutForKeyPress3 --;
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKeyInput3+0x98>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <getKeyInput3+0x98>)
 800030a:	6013      	str	r3, [r2, #0]
	        if (TimeOutForKeyPress3 == 0){
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <getKeyInput3+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyInput3+0x7e>
	          KeyReg11 = NORMAL_STATE;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <getKeyInput3+0x94>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000024 	.word	0x20000024
 8000324:	20000028 	.word	0x20000028
 8000328:	20000020 	.word	0x20000020
 800032c:	40010c00 	.word	0x40010c00
 8000330:	2000002c 	.word	0x2000002c
 8000334:	20000038 	.word	0x20000038
 8000338:	20000098 	.word	0x20000098

0800033c <fsm_run>:
 */

#include "fsm.h"


void fsm_run(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch(status){
 8000340:	4b59      	ldr	r3, [pc, #356]	; (80004a8 <fsm_run+0x16c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	2b03      	cmp	r3, #3
 8000348:	f200 80a3 	bhi.w	8000492 <fsm_run+0x156>
 800034c:	a201      	add	r2, pc, #4	; (adr r2, 8000354 <fsm_run+0x18>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000365 	.word	0x08000365
 8000358:	080003b1 	.word	0x080003b1
 800035c:	080003fb 	.word	0x080003fb
 8000360:	08000445 	.word	0x08000445
	case 1:
		mode1();
 8000364:	f000 fa8a 	bl	800087c <mode1>
		if(button1_flag == 1){
 8000368:	4b50      	ldr	r3, [pc, #320]	; (80004ac <fsm_run+0x170>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	f040 8092 	bne.w	8000496 <fsm_run+0x15a>
			status = 2;
 8000372:	4b4d      	ldr	r3, [pc, #308]	; (80004a8 <fsm_run+0x16c>)
 8000374:	2202      	movs	r2, #2
 8000376:	601a      	str	r2, [r3, #0]
			button1_flag = 0;
 8000378:	4b4c      	ldr	r3, [pc, #304]	; (80004ac <fsm_run+0x170>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
//			HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);

			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000384:	484a      	ldr	r0, [pc, #296]	; (80004b0 <fsm_run+0x174>)
 8000386:	f001 f920 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2108      	movs	r1, #8
 800038e:	4849      	ldr	r0, [pc, #292]	; (80004b4 <fsm_run+0x178>)
 8000390:	f001 f91b 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2120      	movs	r1, #32
 8000398:	4846      	ldr	r0, [pc, #280]	; (80004b4 <fsm_run+0x178>)
 800039a:	f001 f916 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2110      	movs	r1, #16
 80003a2:	4844      	ldr	r0, [pc, #272]	; (80004b4 <fsm_run+0x178>)
 80003a4:	f001 f911 	bl	80015ca <HAL_GPIO_WritePin>
			setTimer2(50);
 80003a8:	2032      	movs	r0, #50	; 0x32
 80003aa:	f000 fc53 	bl	8000c54 <setTimer2>
		}
		break;
 80003ae:	e072      	b.n	8000496 <fsm_run+0x15a>
	case 2:
		mode2();
 80003b0:	f000 fb28 	bl	8000a04 <mode2>
		if(button1_flag == 1){
 80003b4:	4b3d      	ldr	r3, [pc, #244]	; (80004ac <fsm_run+0x170>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d16e      	bne.n	800049a <fsm_run+0x15e>
			status = 3;
 80003bc:	4b3a      	ldr	r3, [pc, #232]	; (80004a8 <fsm_run+0x16c>)
 80003be:	2203      	movs	r2, #3
 80003c0:	601a      	str	r2, [r3, #0]
			button1_flag = 0;
 80003c2:	4b3a      	ldr	r3, [pc, #232]	; (80004ac <fsm_run+0x170>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
//			HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);

			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ce:	4838      	ldr	r0, [pc, #224]	; (80004b0 <fsm_run+0x174>)
 80003d0:	f001 f8fb 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2108      	movs	r1, #8
 80003d8:	4836      	ldr	r0, [pc, #216]	; (80004b4 <fsm_run+0x178>)
 80003da:	f001 f8f6 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	2120      	movs	r1, #32
 80003e2:	4834      	ldr	r0, [pc, #208]	; (80004b4 <fsm_run+0x178>)
 80003e4:	f001 f8f1 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2110      	movs	r1, #16
 80003ec:	4831      	ldr	r0, [pc, #196]	; (80004b4 <fsm_run+0x178>)
 80003ee:	f001 f8ec 	bl	80015ca <HAL_GPIO_WritePin>
			setTimer3(50);
 80003f2:	2032      	movs	r0, #50	; 0x32
 80003f4:	f000 fc42 	bl	8000c7c <setTimer3>
		}
		break;
 80003f8:	e04f      	b.n	800049a <fsm_run+0x15e>
	case 3:
		mode3();
 80003fa:	f000 fb5f 	bl	8000abc <mode3>
		if(button1_flag == 1){
 80003fe:	4b2b      	ldr	r3, [pc, #172]	; (80004ac <fsm_run+0x170>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d14b      	bne.n	800049e <fsm_run+0x162>
			status = 4;
 8000406:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <fsm_run+0x16c>)
 8000408:	2204      	movs	r2, #4
 800040a:	601a      	str	r2, [r3, #0]
			button1_flag = 0;
 800040c:	4b27      	ldr	r3, [pc, #156]	; (80004ac <fsm_run+0x170>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
//			HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);

			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000418:	4825      	ldr	r0, [pc, #148]	; (80004b0 <fsm_run+0x174>)
 800041a:	f001 f8d6 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2108      	movs	r1, #8
 8000422:	4824      	ldr	r0, [pc, #144]	; (80004b4 <fsm_run+0x178>)
 8000424:	f001 f8d1 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2120      	movs	r1, #32
 800042c:	4821      	ldr	r0, [pc, #132]	; (80004b4 <fsm_run+0x178>)
 800042e:	f001 f8cc 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2110      	movs	r1, #16
 8000436:	481f      	ldr	r0, [pc, #124]	; (80004b4 <fsm_run+0x178>)
 8000438:	f001 f8c7 	bl	80015ca <HAL_GPIO_WritePin>
			setTimer4(50);
 800043c:	2032      	movs	r0, #50	; 0x32
 800043e:	f000 fc31 	bl	8000ca4 <setTimer4>
		}
		break;
 8000442:	e02c      	b.n	800049e <fsm_run+0x162>
	case 4:
		mode4();
 8000444:	f000 fb96 	bl	8000b74 <mode4>
		if(button1_flag == 1){
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <fsm_run+0x170>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d128      	bne.n	80004a2 <fsm_run+0x166>
			status = 1;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <fsm_run+0x16c>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
			button1_flag = 0;
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <fsm_run+0x170>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
//			HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
//			HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
//			HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);

			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000462:	4813      	ldr	r0, [pc, #76]	; (80004b0 <fsm_run+0x174>)
 8000464:	f001 f8b1 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2108      	movs	r1, #8
 800046c:	4811      	ldr	r0, [pc, #68]	; (80004b4 <fsm_run+0x178>)
 800046e:	f001 f8ac 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2120      	movs	r1, #32
 8000476:	480f      	ldr	r0, [pc, #60]	; (80004b4 <fsm_run+0x178>)
 8000478:	f001 f8a7 	bl	80015ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2110      	movs	r1, #16
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <fsm_run+0x178>)
 8000482:	f001 f8a2 	bl	80015ca <HAL_GPIO_WritePin>
			update_global_time();
 8000486:	f000 f817 	bl	80004b8 <update_global_time>
			setTimer(50);
 800048a:	2032      	movs	r0, #50	; 0x32
 800048c:	f000 fbce 	bl	8000c2c <setTimer>
		}
		break;
 8000490:	e007      	b.n	80004a2 <fsm_run+0x166>
	default:
		break;
 8000492:	bf00      	nop
 8000494:	e006      	b.n	80004a4 <fsm_run+0x168>
		break;
 8000496:	bf00      	nop
 8000498:	e004      	b.n	80004a4 <fsm_run+0x168>
		break;
 800049a:	bf00      	nop
 800049c:	e002      	b.n	80004a4 <fsm_run+0x168>
		break;
 800049e:	bf00      	nop
 80004a0:	e000      	b.n	80004a4 <fsm_run+0x168>
		break;
 80004a2:	bf00      	nop
	}

}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000060 	.word	0x20000060
 80004ac:	20000090 	.word	0x20000090
 80004b0:	40010800 	.word	0x40010800
 80004b4:	40010c00 	.word	0x40010c00

080004b8 <update_global_time>:
int yellow_time[2] = {2, 2};
int red_time[2] = {6, 6};

int status = 1;

void update_global_time(){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
green_time[0] = green_time_global;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <update_global_time+0x3c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <update_global_time+0x40>)
 80004c2:	6013      	str	r3, [r2, #0]
green_time[1] = green_time_global;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <update_global_time+0x3c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <update_global_time+0x40>)
 80004ca:	6053      	str	r3, [r2, #4]
red_time[0] = red_time_global;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <update_global_time+0x44>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <update_global_time+0x48>)
 80004d2:	6013      	str	r3, [r2, #0]
red_time[1] = red_time_global;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <update_global_time+0x44>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a09      	ldr	r2, [pc, #36]	; (8000500 <update_global_time+0x48>)
 80004da:	6053      	str	r3, [r2, #4]
yellow_time[0] = yellow_time_global;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <update_global_time+0x4c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <update_global_time+0x50>)
 80004e2:	6013      	str	r3, [r2, #0]
yellow_time[1] = yellow_time_global;
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <update_global_time+0x4c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <update_global_time+0x50>)
 80004ea:	6053      	str	r3, [r2, #4]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	2000003c 	.word	0x2000003c
 80004f8:	20000048 	.word	0x20000048
 80004fc:	20000044 	.word	0x20000044
 8000500:	20000058 	.word	0x20000058
 8000504:	20000040 	.word	0x20000040
 8000508:	20000050 	.word	0x20000050

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fd50 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f824 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f926 	bl	8000768 <MX_GPIO_Init>
  MX_TIM2_Init();
 800051c:	f000 f862 	bl	80005e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000520:	f000 f8ac 	bl	800067c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x4c>)
 8000526:	f001 fca1 	bl	8001e6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <main+0x50>)
 800052c:	f001 fc9e 	bl	8001e6c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	480a      	ldr	r0, [pc, #40]	; (800055c <main+0x50>)
 8000534:	f001 fd44 	bl	8001fc0 <HAL_TIM_PWM_Start>
  setTimer(100);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f000 fb77 	bl	8000c2c <setTimer>
  setTimer2(50);
 800053e:	2032      	movs	r0, #50	; 0x32
 8000540:	f000 fb88 	bl	8000c54 <setTimer2>
  setTimer3(50);
 8000544:	2032      	movs	r0, #50	; 0x32
 8000546:	f000 fb99 	bl	8000c7c <setTimer3>
  setTimer4(50);
 800054a:	2032      	movs	r0, #50	; 0x32
 800054c:	f000 fbaa 	bl	8000ca4 <setTimer4>
  while (1)
  {
	  fsm_run();
 8000550:	f7ff fef4 	bl	800033c <fsm_run>
 8000554:	e7fc      	b.n	8000550 <main+0x44>
 8000556:	bf00      	nop
 8000558:	2000011c 	.word	0x2000011c
 800055c:	200000d4 	.word	0x200000d4

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b090      	sub	sp, #64	; 0x40
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2228      	movs	r2, #40	; 0x28
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fbae 	bl	8002cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000592:	2300      	movs	r3, #0
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000596:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 f82b 	bl	80015fc <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005ac:	f000 f960 	bl	8000870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fa96 	bl	8001afc <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005d6:	f000 f94b 	bl	8000870 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3740      	adds	r7, #64	; 0x40
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_TIM2_Init+0x94>)
 8000602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_TIM2_Init+0x94>)
 800060a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800060e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_TIM2_Init+0x94>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_TIM2_Init+0x94>)
 8000618:	2209      	movs	r2, #9
 800061a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_TIM2_Init+0x94>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_TIM2_Init+0x94>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <MX_TIM2_Init+0x94>)
 800062a:	f001 fbcf 	bl	8001dcc <HAL_TIM_Base_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000634:	f000 f91c 	bl	8000870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4619      	mov	r1, r3
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_TIM2_Init+0x94>)
 8000646:	f001 ff23 	bl	8002490 <HAL_TIM_ConfigClockSource>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000650:	f000 f90e 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000654:	2300      	movs	r3, #0
 8000656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_TIM2_Init+0x94>)
 8000662:	f002 faa1 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800066c:	f000 f900 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000011c 	.word	0x2000011c

0800067c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <MX_TIM3_Init+0xe4>)
 80006ae:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <MX_TIM3_Init+0xe8>)
 80006b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <MX_TIM3_Init+0xe4>)
 80006b4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80006b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_TIM3_Init+0xe4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_TIM3_Init+0xe4>)
 80006c2:	2209      	movs	r2, #9
 80006c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_TIM3_Init+0xe4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_TIM3_Init+0xe4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006d2:	4823      	ldr	r0, [pc, #140]	; (8000760 <MX_TIM3_Init+0xe4>)
 80006d4:	f001 fb7a 	bl	8001dcc <HAL_TIM_Base_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006de:	f000 f8c7 	bl	8000870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ec:	4619      	mov	r1, r3
 80006ee:	481c      	ldr	r0, [pc, #112]	; (8000760 <MX_TIM3_Init+0xe4>)
 80006f0:	f001 fece 	bl	8002490 <HAL_TIM_ConfigClockSource>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006fa:	f000 f8b9 	bl	8000870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006fe:	4818      	ldr	r0, [pc, #96]	; (8000760 <MX_TIM3_Init+0xe4>)
 8000700:	f001 fc06 	bl	8001f10 <HAL_TIM_PWM_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800070a:	f000 f8b1 	bl	8000870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4619      	mov	r1, r3
 800071c:	4810      	ldr	r0, [pc, #64]	; (8000760 <MX_TIM3_Init+0xe4>)
 800071e:	f002 fa43 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000728:	f000 f8a2 	bl	8000870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072c:	2360      	movs	r3, #96	; 0x60
 800072e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <MX_TIM3_Init+0xe4>)
 8000744:	f001 fde6 	bl	8002314 <HAL_TIM_PWM_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800074e:	f000 f88f 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000752:	4803      	ldr	r0, [pc, #12]	; (8000760 <MX_TIM3_Init+0xe4>)
 8000754:	f000 fb94 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000758:	bf00      	nop
 800075a:	3738      	adds	r7, #56	; 0x38
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000d4 	.word	0x200000d4
 8000764:	40000400 	.word	0x40000400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <MX_GPIO_Init+0xd0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a2d      	ldr	r2, [pc, #180]	; (8000838 <MX_GPIO_Init+0xd0>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <MX_GPIO_Init+0xd0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_GPIO_Init+0xd0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a27      	ldr	r2, [pc, #156]	; (8000838 <MX_GPIO_Init+0xd0>)
 800079a:	f043 0308 	orr.w	r3, r3, #8
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0308 	and.w	r3, r3, #8
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80007b2:	4822      	ldr	r0, [pc, #136]	; (800083c <MX_GPIO_Init+0xd4>)
 80007b4:	f000 ff09 	bl	80015ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80007be:	4820      	ldr	r0, [pc, #128]	; (8000840 <MX_GPIO_Init+0xd8>)
 80007c0:	f000 ff03 	bl	80015ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80007c4:	2313      	movs	r3, #19
 80007c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	481a      	ldr	r0, [pc, #104]	; (8000840 <MX_GPIO_Init+0xd8>)
 80007d8:	f000 fd5c 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 80007dc:	2301      	movs	r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4619      	mov	r1, r3
 80007ee:	4813      	ldr	r0, [pc, #76]	; (800083c <MX_GPIO_Init+0xd4>)
 80007f0:	f000 fd50 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80007f4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80007f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4619      	mov	r1, r3
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0xd4>)
 800080e:	f000 fd41 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000812:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000816:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_GPIO_Init+0xd8>)
 800082c:	f000 fd32 	bl	8001294 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	40010c00 	.word	0x40010c00
 8000840:	40010800 	.word	0x40010800

08000844 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
timerRun();
 800084c:	f000 fa3e 	bl	8000ccc <timerRun>
timerRun2();
 8000850:	f000 fa56 	bl	8000d00 <timerRun2>
timerRun3();
 8000854:	f000 fa6e 	bl	8000d34 <timerRun3>
timerRun4();
 8000858:	f000 fa86 	bl	8000d68 <timerRun4>
getKeyInput();
 800085c:	f7ff fc82 	bl	8000164 <getKeyInput>
getKeyInput2();
 8000860:	f7ff fccc 	bl	80001fc <getKeyInput2>
getKeyInput3();
 8000864:	f7ff fd1a 	bl	800029c <getKeyInput3>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <mode1>:
//  	  	HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
//  		}
//  	}
//  }

  void mode1(){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

		  if(timer1_flag == 1){
 8000880:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <mode1+0x168>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	f040 80ab 	bne.w	80009e0 <mode1+0x164>
		  if(led_status[0] != 'Y' && led_status[1] == 'R'){
 800088a:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <mode1+0x16c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b59      	cmp	r3, #89	; 0x59
 8000890:	d029      	beq.n	80008e6 <mode1+0x6a>
 8000892:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <mode1+0x16c>)
 8000894:	785b      	ldrb	r3, [r3, #1]
 8000896:	2b52      	cmp	r3, #82	; 0x52
 8000898:	d125      	bne.n	80008e6 <mode1+0x6a>
//			  	  display7SEG(green_time[0], 'x');
//			  	  display7SEG(green_time[0] + yellow_time[0], 'y');
		 		  green_time[0]--;
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <mode1+0x170>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3b01      	subs	r3, #1
 80008a0:	4a52      	ldr	r2, [pc, #328]	; (80009ec <mode1+0x170>)
 80008a2:	6013      	str	r3, [r2, #0]
		 		  if(green_time[0] == 0){
 80008a4:	4b51      	ldr	r3, [pc, #324]	; (80009ec <mode1+0x170>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d106      	bne.n	80008ba <mode1+0x3e>
		 			  green_time[0] = green_time_global;
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <mode1+0x174>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a4e      	ldr	r2, [pc, #312]	; (80009ec <mode1+0x170>)
 80008b2:	6013      	str	r3, [r2, #0]
		 			  led_status[0] = 'Y';
 80008b4:	4b4c      	ldr	r3, [pc, #304]	; (80009e8 <mode1+0x16c>)
 80008b6:	2259      	movs	r2, #89	; 0x59
 80008b8:	701a      	strb	r2, [r3, #0]
//		 		  HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
//		 		  HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
//		 		  HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, SET);
//		 		  HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, SET);

		 		  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2120      	movs	r1, #32
 80008be:	484d      	ldr	r0, [pc, #308]	; (80009f4 <mode1+0x178>)
 80008c0:	f000 fe83 	bl	80015ca <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2110      	movs	r1, #16
 80008c8:	484a      	ldr	r0, [pc, #296]	; (80009f4 <mode1+0x178>)
 80008ca:	f000 fe7e 	bl	80015ca <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d4:	4848      	ldr	r0, [pc, #288]	; (80009f8 <mode1+0x17c>)
 80008d6:	f000 fe78 	bl	80015ca <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2108      	movs	r1, #8
 80008de:	4845      	ldr	r0, [pc, #276]	; (80009f4 <mode1+0x178>)
 80008e0:	f000 fe73 	bl	80015ca <HAL_GPIO_WritePin>
 80008e4:	e079      	b.n	80009da <mode1+0x15e>
		 	  }
		 	  else if(led_status[0] == 'Y' && led_status[1] == 'R'){
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <mode1+0x16c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b59      	cmp	r3, #89	; 0x59
 80008ec:	d122      	bne.n	8000934 <mode1+0xb8>
 80008ee:	4b3e      	ldr	r3, [pc, #248]	; (80009e8 <mode1+0x16c>)
 80008f0:	785b      	ldrb	r3, [r3, #1]
 80008f2:	2b52      	cmp	r3, #82	; 0x52
 80008f4:	d11e      	bne.n	8000934 <mode1+0xb8>
//			  	  display7SEG(yellow_time[0], 'x');
//			  	  display7SEG(yellow_time[0], 'y');
		 		  yellow_time[0]--;
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <mode1+0x180>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a3f      	ldr	r2, [pc, #252]	; (80009fc <mode1+0x180>)
 80008fe:	6013      	str	r3, [r2, #0]
		 		  if(yellow_time[0] == 0){
 8000900:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <mode1+0x180>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d109      	bne.n	800091c <mode1+0xa0>
		 			  yellow_time[0] = yellow_time_global;
 8000908:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <mode1+0x184>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a3b      	ldr	r2, [pc, #236]	; (80009fc <mode1+0x180>)
 800090e:	6013      	str	r3, [r2, #0]
		 			  led_status[0] = 'R';
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <mode1+0x16c>)
 8000912:	2252      	movs	r2, #82	; 0x52
 8000914:	701a      	strb	r2, [r3, #0]
		 			  led_status[1] = 'G';
 8000916:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <mode1+0x16c>)
 8000918:	2247      	movs	r2, #71	; 0x47
 800091a:	705a      	strb	r2, [r3, #1]
		 		  }
//		 		  HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
//		 		  HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, SET);

		 		 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <mode1+0x17c>)
 8000924:	f000 fe51 	bl	80015ca <HAL_GPIO_WritePin>
		 		 HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2108      	movs	r1, #8
 800092c:	4831      	ldr	r0, [pc, #196]	; (80009f4 <mode1+0x178>)
 800092e:	f000 fe4c 	bl	80015ca <HAL_GPIO_WritePin>
 8000932:	e052      	b.n	80009da <mode1+0x15e>
		 	  }
		 	  else if(led_status[0] == 'R' && led_status[1] == 'G'){
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <mode1+0x16c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b52      	cmp	r3, #82	; 0x52
 800093a:	d129      	bne.n	8000990 <mode1+0x114>
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <mode1+0x16c>)
 800093e:	785b      	ldrb	r3, [r3, #1]
 8000940:	2b47      	cmp	r3, #71	; 0x47
 8000942:	d125      	bne.n	8000990 <mode1+0x114>
//			  	  display7SEG(green_time[1] + yellow_time[1], 'x');
//			  	  display7SEG(green_time[1], 'y');
		 		  green_time[1]--;
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <mode1+0x170>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	3b01      	subs	r3, #1
 800094a:	4a28      	ldr	r2, [pc, #160]	; (80009ec <mode1+0x170>)
 800094c:	6053      	str	r3, [r2, #4]
		 		  if(green_time[1] == 0){
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <mode1+0x170>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d106      	bne.n	8000964 <mode1+0xe8>
		 			  green_time[1] = green_time_global;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <mode1+0x174>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a24      	ldr	r2, [pc, #144]	; (80009ec <mode1+0x170>)
 800095c:	6053      	str	r3, [r2, #4]
		 			  led_status[1] = 'Y';
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <mode1+0x16c>)
 8000960:	2259      	movs	r2, #89	; 0x59
 8000962:	705a      	strb	r2, [r3, #1]
//		 		  HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
//		 		  HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, SET);
//		 		  HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);
//		 		  HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, SET);

		 		 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096a:	4823      	ldr	r0, [pc, #140]	; (80009f8 <mode1+0x17c>)
 800096c:	f000 fe2d 	bl	80015ca <HAL_GPIO_WritePin>
		 		 HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2108      	movs	r1, #8
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <mode1+0x178>)
 8000976:	f000 fe28 	bl	80015ca <HAL_GPIO_WritePin>
		 		 HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2120      	movs	r1, #32
 800097e:	481d      	ldr	r0, [pc, #116]	; (80009f4 <mode1+0x178>)
 8000980:	f000 fe23 	bl	80015ca <HAL_GPIO_WritePin>
		 		 HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2110      	movs	r1, #16
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <mode1+0x178>)
 800098a:	f000 fe1e 	bl	80015ca <HAL_GPIO_WritePin>
 800098e:	e024      	b.n	80009da <mode1+0x15e>
		 	  }
		 	  else if(led_status[0] == 'R' && led_status[1] == 'Y'){
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <mode1+0x16c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b52      	cmp	r3, #82	; 0x52
 8000996:	d120      	bne.n	80009da <mode1+0x15e>
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <mode1+0x16c>)
 800099a:	785b      	ldrb	r3, [r3, #1]
 800099c:	2b59      	cmp	r3, #89	; 0x59
 800099e:	d11c      	bne.n	80009da <mode1+0x15e>
//			  	  display7SEG(yellow_time[1], 'x');
//			  	  display7SEG(yellow_time[1], 'y');
		 		  yellow_time[1]--;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <mode1+0x180>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <mode1+0x180>)
 80009a8:	6053      	str	r3, [r2, #4]
		 		  if(yellow_time[1] == 0){
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <mode1+0x180>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d109      	bne.n	80009c6 <mode1+0x14a>
		 			  yellow_time[1] = yellow_time_global;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <mode1+0x184>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <mode1+0x180>)
 80009b8:	6053      	str	r3, [r2, #4]
		 			  led_status[1] = 'R';
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <mode1+0x16c>)
 80009bc:	2252      	movs	r2, #82	; 0x52
 80009be:	705a      	strb	r2, [r3, #1]
		 			  led_status[0] = 'G';
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <mode1+0x16c>)
 80009c2:	2247      	movs	r2, #71	; 0x47
 80009c4:	701a      	strb	r2, [r3, #0]
		 		  }
//		 		  HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
//		 		  HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, SET);

		 		  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2120      	movs	r1, #32
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <mode1+0x178>)
 80009cc:	f000 fdfd 	bl	80015ca <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <mode1+0x178>)
 80009d6:	f000 fdf8 	bl	80015ca <HAL_GPIO_WritePin>
		 	  }
		  setTimer(100);
 80009da:	2064      	movs	r0, #100	; 0x64
 80009dc:	f000 f926 	bl	8000c2c <setTimer>
		  }
  }
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000b8 	.word	0x200000b8
 80009e8:	20000064 	.word	0x20000064
 80009ec:	20000048 	.word	0x20000048
 80009f0:	2000003c 	.word	0x2000003c
 80009f4:	40010c00 	.word	0x40010c00
 80009f8:	40010800 	.word	0x40010800
 80009fc:	20000050 	.word	0x20000050
 8000a00:	20000040 	.word	0x20000040

08000a04 <mode2>:

int mode_red_time = 0;

int on_changed = 0;

void mode2(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	if(mode_red_time > 9){
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <mode2+0x98>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b09      	cmp	r3, #9
 8000a0e:	dd02      	ble.n	8000a16 <mode2+0x12>
		mode_red_time = 0;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <mode2+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
	}
if(mode_red_time >= 0){
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <mode2+0x98>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db1b      	blt.n	8000a56 <mode2+0x52>
//	display7SEG(mode_red_time, 'x');
	if(timer2_flag == 1){
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <mode2+0x9c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d117      	bne.n	8000a56 <mode2+0x52>
//	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
//	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);

	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2c:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <mode2+0xa0>)
 8000a2e:	f000 fdcc 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2108      	movs	r1, #8
 8000a36:	481c      	ldr	r0, [pc, #112]	; (8000aa8 <mode2+0xa4>)
 8000a38:	f000 fdc7 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2120      	movs	r1, #32
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <mode2+0xa4>)
 8000a42:	f000 fdc2 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <mode2+0xa4>)
 8000a4c:	f000 fdbd 	bl	80015ca <HAL_GPIO_WritePin>

	setTimer2(50);
 8000a50:	2032      	movs	r0, #50	; 0x32
 8000a52:	f000 f8ff 	bl	8000c54 <setTimer2>
	}
}
	if(button3_flag == 1){
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <mode2+0xa8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d109      	bne.n	8000a72 <mode2+0x6e>
		on_changed = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <mode2+0xac>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
		red_time_global = mode_red_time;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <mode2+0x98>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <mode2+0xb0>)
 8000a6a:	6013      	str	r3, [r2, #0]
		button3_flag = 0;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <mode2+0xa8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
	}
	if(button2_flag == 1){
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <mode2+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d10e      	bne.n	8000a98 <mode2+0x94>
		button2_flag = 0;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <mode2+0xb4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
		on_changed = 1;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <mode2+0xac>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
		if(on_changed){
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <mode2+0xac>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <mode2+0x94>
		mode_red_time++;
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <mode2+0x98>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a01      	ldr	r2, [pc, #4]	; (8000a9c <mode2+0x98>)
 8000a96:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000009c 	.word	0x2000009c
 8000aa0:	200000c0 	.word	0x200000c0
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	40010c00 	.word	0x40010c00
 8000aac:	20000098 	.word	0x20000098
 8000ab0:	200000a0 	.word	0x200000a0
 8000ab4:	20000044 	.word	0x20000044
 8000ab8:	20000094 	.word	0x20000094

08000abc <mode3>:

int mode_yellow_time = 0;

int on_changed3 = 0;

void mode3(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	if(mode_yellow_time > 9){
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <mode3+0x98>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b09      	cmp	r3, #9
 8000ac6:	dd02      	ble.n	8000ace <mode3+0x12>
		mode_yellow_time = 0;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <mode3+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
	}
if(mode_yellow_time >= 0){
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <mode3+0x98>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db1b      	blt.n	8000b0e <mode3+0x52>
//	display7SEG(mode_yellow_time, 'x');
//	display7SEG(3, 'y');
	if(timer3_flag == 1){
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <mode3+0x9c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d117      	bne.n	8000b0e <mode3+0x52>
//	HAL_GPIO_WritePin(LED_GREEN_X_GPIO_Port, LED_GREEN_X_Pin, RESET);
//	HAL_GPIO_WritePin(LED_GREEN_Y_GPIO_Port, LED_GREEN_Y_Pin, RESET);
//	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
//	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);

	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	481d      	ldr	r0, [pc, #116]	; (8000b5c <mode3+0xa0>)
 8000ae6:	f000 fd70 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2108      	movs	r1, #8
 8000aee:	481c      	ldr	r0, [pc, #112]	; (8000b60 <mode3+0xa4>)
 8000af0:	f000 fd6b 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2120      	movs	r1, #32
 8000af8:	4819      	ldr	r0, [pc, #100]	; (8000b60 <mode3+0xa4>)
 8000afa:	f000 fd66 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2110      	movs	r1, #16
 8000b02:	4817      	ldr	r0, [pc, #92]	; (8000b60 <mode3+0xa4>)
 8000b04:	f000 fd61 	bl	80015ca <HAL_GPIO_WritePin>

	setTimer3(50);
 8000b08:	2032      	movs	r0, #50	; 0x32
 8000b0a:	f000 f8b7 	bl	8000c7c <setTimer3>
	}
}
	if(button3_flag == 1){
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <mode3+0xa8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d109      	bne.n	8000b2a <mode3+0x6e>
		on_changed3 = 0;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <mode3+0xac>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
		yellow_time_global = mode_yellow_time;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <mode3+0x98>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <mode3+0xb0>)
 8000b22:	6013      	str	r3, [r2, #0]
		button3_flag = 0;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <mode3+0xa8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
	}
	if(button2_flag == 1){
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <mode3+0xb4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10e      	bne.n	8000b50 <mode3+0x94>
		button2_flag = 0;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <mode3+0xb4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
		on_changed3 = 1;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <mode3+0xac>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
		if(on_changed3){
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <mode3+0xac>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d004      	beq.n	8000b50 <mode3+0x94>
		mode_yellow_time++;
 8000b46:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <mode3+0x98>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a01      	ldr	r2, [pc, #4]	; (8000b54 <mode3+0x98>)
 8000b4e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000a4 	.word	0x200000a4
 8000b58:	200000c8 	.word	0x200000c8
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	40010c00 	.word	0x40010c00
 8000b64:	20000098 	.word	0x20000098
 8000b68:	200000a8 	.word	0x200000a8
 8000b6c:	20000040 	.word	0x20000040
 8000b70:	20000094 	.word	0x20000094

08000b74 <mode4>:

int mode_green_time = 0;

int on_changed4 = 0;

void mode4(){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	if(mode_green_time > 9){
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <mode4+0x98>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b09      	cmp	r3, #9
 8000b7e:	dd02      	ble.n	8000b86 <mode4+0x12>
		mode_green_time = 0;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <mode4+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
	}
if(mode_green_time >= 0){
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <mode4+0x98>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db1b      	blt.n	8000bc6 <mode4+0x52>
//	display7SEG(mode_green_time, 'x');
//	display7SEG(4, 'y');
	if(timer4_flag == 1){
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <mode4+0x9c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d117      	bne.n	8000bc6 <mode4+0x52>
//	HAL_GPIO_WritePin(LED_YELLOW_X_GPIO_Port, LED_YELLOW_X_Pin, RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_Y_GPIO_Port, LED_YELLOW_Y_Pin, RESET);
//	HAL_GPIO_WritePin(LED_RED_X_GPIO_Port, LED_RED_X_Pin, RESET);
//	HAL_GPIO_WritePin(LED_RED_Y_GPIO_Port, LED_RED_Y_Pin, RESET);

	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9c:	481d      	ldr	r0, [pc, #116]	; (8000c14 <mode4+0xa0>)
 8000b9e:	f000 fd14 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	481c      	ldr	r0, [pc, #112]	; (8000c18 <mode4+0xa4>)
 8000ba8:	f000 fd0f 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2120      	movs	r1, #32
 8000bb0:	4819      	ldr	r0, [pc, #100]	; (8000c18 <mode4+0xa4>)
 8000bb2:	f000 fd0a 	bl	80015ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4817      	ldr	r0, [pc, #92]	; (8000c18 <mode4+0xa4>)
 8000bbc:	f000 fd05 	bl	80015ca <HAL_GPIO_WritePin>

	setTimer4(50);
 8000bc0:	2032      	movs	r0, #50	; 0x32
 8000bc2:	f000 f86f 	bl	8000ca4 <setTimer4>
	}
}
	if(button3_flag == 1){
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <mode4+0xa8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d109      	bne.n	8000be2 <mode4+0x6e>
		on_changed4 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <mode4+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
		green_time_global = mode_green_time;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <mode4+0x98>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <mode4+0xb0>)
 8000bda:	6013      	str	r3, [r2, #0]
		button3_flag = 0;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <mode4+0xa8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
	}
	if(button2_flag == 1){
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <mode4+0xb4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10e      	bne.n	8000c08 <mode4+0x94>
		button2_flag = 0;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <mode4+0xb4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
		on_changed4 = 1;
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <mode4+0xac>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
		if(on_changed4){
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <mode4+0xac>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d004      	beq.n	8000c08 <mode4+0x94>
		mode_green_time++;
 8000bfe:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <mode4+0x98>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a01      	ldr	r2, [pc, #4]	; (8000c0c <mode4+0x98>)
 8000c06:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200000ac 	.word	0x200000ac
 8000c10:	200000d0 	.word	0x200000d0
 8000c14:	40010800 	.word	0x40010800
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	20000098 	.word	0x20000098
 8000c20:	200000b0 	.word	0x200000b0
 8000c24:	2000003c 	.word	0x2000003c
 8000c28:	20000094 	.word	0x20000094

08000c2c <setTimer>:
int timer3_flag = 0;

int timer4_counter = 0;
int timer4_flag = 0;

void setTimer(int duration){
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <setTimer+0x20>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <setTimer+0x24>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200000b4 	.word	0x200000b4
 8000c50:	200000b8 	.word	0x200000b8

08000c54 <setTimer2>:

void setTimer2(int duration){
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000c5c:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <setTimer2+0x20>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <setTimer2+0x24>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200000bc 	.word	0x200000bc
 8000c78:	200000c0 	.word	0x200000c0

08000c7c <setTimer3>:

void setTimer3(int duration){
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000c84:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <setTimer3+0x20>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <setTimer3+0x24>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	200000c4 	.word	0x200000c4
 8000ca0:	200000c8 	.word	0x200000c8

08000ca4 <setTimer4>:

void setTimer4(int duration){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <setTimer4+0x20>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <setTimer4+0x24>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200000cc 	.word	0x200000cc
 8000cc8:	200000d0 	.word	0x200000d0

08000ccc <timerRun>:

void timerRun(){
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <timerRun+0x2c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	dd0b      	ble.n	8000cf0 <timerRun+0x24>
		timer1_counter--;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <timerRun+0x2c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <timerRun+0x2c>)
 8000ce0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <timerRun+0x2c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <timerRun+0x24>
			timer1_flag = 1;
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <timerRun+0x30>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	200000b4 	.word	0x200000b4
 8000cfc:	200000b8 	.word	0x200000b8

08000d00 <timerRun2>:

void timerRun2(){
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
	if(timer2_counter > 0){
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <timerRun2+0x2c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	dd0b      	ble.n	8000d24 <timerRun2+0x24>
		timer2_counter--;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <timerRun2+0x2c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <timerRun2+0x2c>)
 8000d14:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <timerRun2+0x2c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <timerRun2+0x24>
			timer2_flag = 1;
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <timerRun2+0x30>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	200000bc 	.word	0x200000bc
 8000d30:	200000c0 	.word	0x200000c0

08000d34 <timerRun3>:

void timerRun3(){
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	if(timer3_counter > 0){
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <timerRun3+0x2c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dd0b      	ble.n	8000d58 <timerRun3+0x24>
		timer3_counter--;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <timerRun3+0x2c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <timerRun3+0x2c>)
 8000d48:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <timerRun3+0x2c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <timerRun3+0x24>
			timer3_flag = 1;
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <timerRun3+0x30>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	200000c4 	.word	0x200000c4
 8000d64:	200000c8 	.word	0x200000c8

08000d68 <timerRun4>:

void timerRun4(){
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	if(timer4_counter > 0){
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <timerRun4+0x2c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dd0b      	ble.n	8000d8c <timerRun4+0x24>
		timer4_counter--;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <timerRun4+0x2c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <timerRun4+0x2c>)
 8000d7c:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <timerRun4+0x2c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <timerRun4+0x24>
			timer4_flag = 1;
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <timerRun4+0x30>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	200000cc 	.word	0x200000cc
 8000d98:	200000d0 	.word	0x200000d0

08000d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_MspInit+0x5c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_MspInit+0x5c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x5c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_MspInit+0x60>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_MspInit+0x60>)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000

08000e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e10:	d114      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	201c      	movs	r0, #28
 8000e30:	f000 f9f9 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e34:	201c      	movs	r0, #28
 8000e36:	f000 fa12 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e3a:	e018      	b.n	8000e6e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_TIM_Base_MspInit+0x7c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d113      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	201d      	movs	r0, #29
 8000e64:	f000 f9df 	bl	8001226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e68:	201d      	movs	r0, #29
 8000e6a:	f000 f9f8 	bl	800125e <HAL_NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40000400 	.word	0x40000400

08000e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_TIM_MspPostInit+0x58>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d117      	bne.n	8000ed0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_TIM_MspPostInit+0x5c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_TIM_MspPostInit+0x5c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_TIM_MspPostInit+0x5c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_TIM_MspPostInit+0x60>)
 8000ecc:	f000 f9e2 	bl	8001294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40000400 	.word	0x40000400
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f889 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM2_IRQHandler+0x10>)
 8000f3a:	f001 f8e3 	bl	8002104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000011c 	.word	0x2000011c

08000f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM3_IRQHandler+0x10>)
 8000f4e:	f001 f8d9 	bl	8002104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000d4 	.word	0x200000d4

08000f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f8e:	f7ff ffe5 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f001 fe79 	bl	8002c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fab9 	bl	800050c <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fa4:	08002d20 	.word	0x08002d20
  ldr r2, =_sbss
 8000fa8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fac:	20000168 	.word	0x20000168

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f923 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fee4 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f93b 	bl	800127a <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f903 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000068 	.word	0x20000068
 8001038:	20000070 	.word	0x20000070
 800103c:	2000006c 	.word	0x2000006c

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000070 	.word	0x20000070
 8001060:	20000164 	.word	0x20000164

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000164 	.word	0x20000164

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4906      	ldr	r1, [pc, #24]	; (8001110 <__NVIC_EnableIRQ+0x34>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff90 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff2d 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff42 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff35 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa2 	bl	80011cc <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e169      	b.n	800157c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a8:	2201      	movs	r2, #1
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8158 	bne.w	8001576 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4a9a      	ldr	r2, [pc, #616]	; (8001534 <HAL_GPIO_Init+0x2a0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d05e      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 80012d0:	4a98      	ldr	r2, [pc, #608]	; (8001534 <HAL_GPIO_Init+0x2a0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d875      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 80012d6:	4a98      	ldr	r2, [pc, #608]	; (8001538 <HAL_GPIO_Init+0x2a4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d058      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 80012dc:	4a96      	ldr	r2, [pc, #600]	; (8001538 <HAL_GPIO_Init+0x2a4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d86f      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 80012e2:	4a96      	ldr	r2, [pc, #600]	; (800153c <HAL_GPIO_Init+0x2a8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d052      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 80012e8:	4a94      	ldr	r2, [pc, #592]	; (800153c <HAL_GPIO_Init+0x2a8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d869      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 80012ee:	4a94      	ldr	r2, [pc, #592]	; (8001540 <HAL_GPIO_Init+0x2ac>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d04c      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 80012f4:	4a92      	ldr	r2, [pc, #584]	; (8001540 <HAL_GPIO_Init+0x2ac>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d863      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 80012fa:	4a92      	ldr	r2, [pc, #584]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d046      	beq.n	800138e <HAL_GPIO_Init+0xfa>
 8001300:	4a90      	ldr	r2, [pc, #576]	; (8001544 <HAL_GPIO_Init+0x2b0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d85d      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 8001306:	2b12      	cmp	r3, #18
 8001308:	d82a      	bhi.n	8001360 <HAL_GPIO_Init+0xcc>
 800130a:	2b12      	cmp	r3, #18
 800130c:	d859      	bhi.n	80013c2 <HAL_GPIO_Init+0x12e>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <HAL_GPIO_Init+0x80>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	0800138f 	.word	0x0800138f
 8001318:	08001369 	.word	0x08001369
 800131c:	0800137b 	.word	0x0800137b
 8001320:	080013bd 	.word	0x080013bd
 8001324:	080013c3 	.word	0x080013c3
 8001328:	080013c3 	.word	0x080013c3
 800132c:	080013c3 	.word	0x080013c3
 8001330:	080013c3 	.word	0x080013c3
 8001334:	080013c3 	.word	0x080013c3
 8001338:	080013c3 	.word	0x080013c3
 800133c:	080013c3 	.word	0x080013c3
 8001340:	080013c3 	.word	0x080013c3
 8001344:	080013c3 	.word	0x080013c3
 8001348:	080013c3 	.word	0x080013c3
 800134c:	080013c3 	.word	0x080013c3
 8001350:	080013c3 	.word	0x080013c3
 8001354:	080013c3 	.word	0x080013c3
 8001358:	08001371 	.word	0x08001371
 800135c:	08001385 	.word	0x08001385
 8001360:	4a79      	ldr	r2, [pc, #484]	; (8001548 <HAL_GPIO_Init+0x2b4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001366:	e02c      	b.n	80013c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e029      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	3304      	adds	r3, #4
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e024      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	3308      	adds	r3, #8
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e01f      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	330c      	adds	r3, #12
 800138a:	623b      	str	r3, [r7, #32]
          break;
 800138c:	e01a      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001396:	2304      	movs	r3, #4
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e013      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2308      	movs	r3, #8
 80013a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	611a      	str	r2, [r3, #16]
          break;
 80013ae:	e009      	b.n	80013c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b0:	2308      	movs	r3, #8
 80013b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	615a      	str	r2, [r3, #20]
          break;
 80013ba:	e003      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x130>
          break;
 80013c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2bff      	cmp	r3, #255	; 0xff
 80013c8:	d801      	bhi.n	80013ce <HAL_GPIO_Init+0x13a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	e001      	b.n	80013d2 <HAL_GPIO_Init+0x13e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3304      	adds	r3, #4
 80013d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2bff      	cmp	r3, #255	; 0xff
 80013d8:	d802      	bhi.n	80013e0 <HAL_GPIO_Init+0x14c>
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x152>
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	3b08      	subs	r3, #8
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	210f      	movs	r1, #15
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	6a39      	ldr	r1, [r7, #32]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80b1 	beq.w	8001576 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_GPIO_Init+0x2b8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a4c      	ldr	r2, [pc, #304]	; (800154c <HAL_GPIO_Init+0x2b8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b4a      	ldr	r3, [pc, #296]	; (800154c <HAL_GPIO_Init+0x2b8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800142c:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_GPIO_Init+0x2bc>)
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a40      	ldr	r2, [pc, #256]	; (8001554 <HAL_GPIO_Init+0x2c0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d013      	beq.n	8001480 <HAL_GPIO_Init+0x1ec>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3f      	ldr	r2, [pc, #252]	; (8001558 <HAL_GPIO_Init+0x2c4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d00d      	beq.n	800147c <HAL_GPIO_Init+0x1e8>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a3e      	ldr	r2, [pc, #248]	; (800155c <HAL_GPIO_Init+0x2c8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x1e4>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a3d      	ldr	r2, [pc, #244]	; (8001560 <HAL_GPIO_Init+0x2cc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_GPIO_Init+0x1e0>
 8001470:	2303      	movs	r3, #3
 8001472:	e006      	b.n	8001482 <HAL_GPIO_Init+0x1ee>
 8001474:	2304      	movs	r3, #4
 8001476:	e004      	b.n	8001482 <HAL_GPIO_Init+0x1ee>
 8001478:	2302      	movs	r3, #2
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x1ee>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_GPIO_Init+0x1ee>
 8001480:	2300      	movs	r3, #0
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	f002 0203 	and.w	r2, r2, #3
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	4093      	lsls	r3, r2
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001492:	492f      	ldr	r1, [pc, #188]	; (8001550 <HAL_GPIO_Init+0x2bc>)
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	492c      	ldr	r1, [pc, #176]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4928      	ldr	r1, [pc, #160]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4922      	ldr	r1, [pc, #136]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	491e      	ldr	r1, [pc, #120]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	4918      	ldr	r1, [pc, #96]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	43db      	mvns	r3, r3
 8001512:	4914      	ldr	r1, [pc, #80]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001514:	4013      	ands	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d021      	beq.n	8001568 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	490e      	ldr	r1, [pc, #56]	; (8001564 <HAL_GPIO_Init+0x2d0>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
 8001530:	e021      	b.n	8001576 <HAL_GPIO_Init+0x2e2>
 8001532:	bf00      	nop
 8001534:	10320000 	.word	0x10320000
 8001538:	10310000 	.word	0x10310000
 800153c:	10220000 	.word	0x10220000
 8001540:	10210000 	.word	0x10210000
 8001544:	10120000 	.word	0x10120000
 8001548:	10110000 	.word	0x10110000
 800154c:	40021000 	.word	0x40021000
 8001550:	40010000 	.word	0x40010000
 8001554:	40010800 	.word	0x40010800
 8001558:	40010c00 	.word	0x40010c00
 800155c:	40011000 	.word	0x40011000
 8001560:	40011400 	.word	0x40011400
 8001564:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_GPIO_Init+0x304>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	43db      	mvns	r3, r3
 8001570:	4909      	ldr	r1, [pc, #36]	; (8001598 <HAL_GPIO_Init+0x304>)
 8001572:	4013      	ands	r3, r2
 8001574:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	3301      	adds	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f ae8e 	bne.w	80012a8 <HAL_GPIO_Init+0x14>
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	372c      	adds	r7, #44	; 0x2c
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e001      	b.n	80015be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	807b      	strh	r3, [r7, #2]
 80015d6:	4613      	mov	r3, r2
 80015d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015da:	787b      	ldrb	r3, [r7, #1]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e0:	887a      	ldrh	r2, [r7, #2]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015e6:	e003      	b.n	80015f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	041a      	lsls	r2, r3, #16
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	611a      	str	r2, [r3, #16]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e26c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8087 	beq.w	800172a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800161c:	4b92      	ldr	r3, [pc, #584]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b04      	cmp	r3, #4
 8001626:	d00c      	beq.n	8001642 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001628:	4b8f      	ldr	r3, [pc, #572]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b08      	cmp	r3, #8
 8001632:	d112      	bne.n	800165a <HAL_RCC_OscConfig+0x5e>
 8001634:	4b8c      	ldr	r3, [pc, #560]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d10b      	bne.n	800165a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001642:	4b89      	ldr	r3, [pc, #548]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d06c      	beq.n	8001728 <HAL_RCC_OscConfig+0x12c>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d168      	bne.n	8001728 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e246      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x76>
 8001664:	4b80      	ldr	r3, [pc, #512]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e02e      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x98>
 800167a:	4b7b      	ldr	r3, [pc, #492]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b78      	ldr	r3, [pc, #480]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a77      	ldr	r2, [pc, #476]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e01d      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0xbc>
 800169e:	4b72      	ldr	r3, [pc, #456]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a71      	ldr	r2, [pc, #452]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b6f      	ldr	r3, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6e      	ldr	r2, [pc, #440]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 80016b8:	4b6b      	ldr	r3, [pc, #428]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6a      	ldr	r2, [pc, #424]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a67      	ldr	r2, [pc, #412]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fcc4 	bl	8001064 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fcc0 	bl	8001064 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1fa      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b5d      	ldr	r3, [pc, #372]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0xe4>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fcb0 	bl	8001064 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fcac 	bl	8001064 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1e6      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x10c>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d063      	beq.n	80017fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001736:	4b4c      	ldr	r3, [pc, #304]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001742:	4b49      	ldr	r3, [pc, #292]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x18c>
 800174e:	4b46      	ldr	r3, [pc, #280]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x176>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e1ba      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4939      	ldr	r1, [pc, #228]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b36      	ldr	r3, [pc, #216]	; (800186c <HAL_RCC_OscConfig+0x270>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fc65 	bl	8001064 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fc61 	bl	8001064 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e19b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4927      	ldr	r1, [pc, #156]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_RCC_OscConfig+0x270>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fc44 	bl	8001064 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc40 	bl	8001064 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e17a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03a      	beq.n	8001880 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d019      	beq.n	8001846 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff fc24 	bl	8001064 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fc20 	bl	8001064 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e15a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f000 faa6 	bl	8001d90 <RCC_Delay>
 8001844:	e01c      	b.n	8001880 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_OscConfig+0x274>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff fc0a 	bl	8001064 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001852:	e00f      	b.n	8001874 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fc06 	bl	8001064 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d908      	bls.n	8001874 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e140      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	42420000 	.word	0x42420000
 8001870:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e9      	bne.n	8001854 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a6 	beq.w	80019da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b97      	ldr	r3, [pc, #604]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b94      	ldr	r3, [pc, #592]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a93      	ldr	r2, [pc, #588]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b8e      	ldr	r3, [pc, #568]	; (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c6:	4b8b      	ldr	r3, [pc, #556]	; (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a8a      	ldr	r2, [pc, #552]	; (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fbc7 	bl	8001064 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff fbc3 	bl	8001064 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0fd      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b81      	ldr	r3, [pc, #516]	; (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x312>
 8001900:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a7a      	ldr	r2, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	e02d      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x334>
 8001916:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a75      	ldr	r2, [pc, #468]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a72      	ldr	r2, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	e01c      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x356>
 8001938:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a6c      	ldr	r2, [pc, #432]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a69      	ldr	r2, [pc, #420]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6213      	str	r3, [r2, #32]
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a66      	ldr	r2, [pc, #408]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a63      	ldr	r2, [pc, #396]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d015      	beq.n	800199e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff fb77 	bl	8001064 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff fb73 	bl	8001064 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0ab      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ee      	beq.n	800197a <HAL_RCC_OscConfig+0x37e>
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fb61 	bl	8001064 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fb5d 	bl	8001064 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e095      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a47      	ldr	r2, [pc, #284]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8081 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d061      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d146      	bne.n	8001a86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_RCC_OscConfig+0x4fc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fb31 	bl	8001064 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff fb2d 	bl	8001064 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e067      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d108      	bne.n	8001a40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	492d      	ldr	r1, [pc, #180]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a19      	ldr	r1, [r3, #32]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	430b      	orrs	r3, r1
 8001a52:	4927      	ldr	r1, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x4fc>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb01 	bl	8001064 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fafd 	bl	8001064 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e037      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46a>
 8001a84:	e02f      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_RCC_OscConfig+0x4fc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff faea 	bl	8001064 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff fae6 	bl	8001064 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e020      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x498>
 8001ab2:	e018      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e013      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42420060 	.word	0x42420060

08001afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0d0      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d910      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	4965      	ldr	r1, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d040      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e073      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06b      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4936      	ldr	r1, [pc, #216]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff fa3a 	bl	8001064 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff fa36 	bl	8001064 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e053      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d210      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4922      	ldr	r1, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1d0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f998 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08002d08 	.word	0x08002d08
 8001cc8:	20000068 	.word	0x20000068
 8001ccc:	2000006c 	.word	0x2000006c

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b490      	push	{r4, r7}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cd8:	1d3c      	adds	r4, r7, #4
 8001cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ce0:	f240 2301 	movw	r3, #513	; 0x201
 8001ce4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x46>
 8001d0e:	e02d      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d12:	623b      	str	r3, [r7, #32]
      break;
 8001d14:	e02d      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d22:	4413      	add	r3, r2
 8001d24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c5b      	lsrs	r3, r3, #17
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d42:	4413      	add	r3, r2
 8001d44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4e:	fb02 f203 	mul.w	r2, r2, r3
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5a:	e004      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d60:	fb02 f303 	mul.w	r3, r2, r3
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	623b      	str	r3, [r7, #32]
      break;
 8001d6a:	e002      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6e:	623b      	str	r3, [r7, #32]
      break;
 8001d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d72:	6a3b      	ldr	r3, [r7, #32]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc90      	pop	{r4, r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	08002cf8 	.word	0x08002cf8
 8001d84:	40021000 	.word	0x40021000
 8001d88:	007a1200 	.word	0x007a1200
 8001d8c:	003d0900 	.word	0x003d0900

08001d90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <RCC_Delay+0x34>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <RCC_Delay+0x38>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0a5b      	lsrs	r3, r3, #9
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dac:	bf00      	nop
  }
  while (Delay --);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	60fa      	str	r2, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f9      	bne.n	8001dac <RCC_Delay+0x1c>
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000068 	.word	0x20000068
 8001dc8:	10624dd3 	.word	0x10624dd3

08001dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e041      	b.n	8001e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f804 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f000 fc28 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d001      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e03a      	b.n	8001efa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_TIM_Base_Start_IT+0x98>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x58>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d009      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x58>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_TIM_Base_Start_IT+0x9c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x58>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <HAL_TIM_Base_Start_IT+0xa0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d111      	bne.n	8001ee8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d010      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee6:	e007      	b.n	8001ef8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800

08001f10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e041      	b.n	8001fa6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f839 	bl	8001fae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 fb86 	bl	8002660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_TIM_PWM_Start+0x24>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e022      	b.n	800202a <HAL_TIM_PWM_Start+0x6a>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d109      	bne.n	8001ffe <HAL_TIM_PWM_Start+0x3e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	e015      	b.n	800202a <HAL_TIM_PWM_Start+0x6a>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d109      	bne.n	8002018 <HAL_TIM_PWM_Start+0x58>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e008      	b.n	800202a <HAL_TIM_PWM_Start+0x6a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e05e      	b.n	80020f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <HAL_TIM_PWM_Start+0x82>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002040:	e013      	b.n	800206a <HAL_TIM_PWM_Start+0xaa>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d104      	bne.n	8002052 <HAL_TIM_PWM_Start+0x92>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002050:	e00b      	b.n	800206a <HAL_TIM_PWM_Start+0xaa>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d104      	bne.n	8002062 <HAL_TIM_PWM_Start+0xa2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002060:	e003      	b.n	800206a <HAL_TIM_PWM_Start+0xaa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fd74 	bl	8002b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_TIM_PWM_Start+0x138>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d107      	bne.n	8002092 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_TIM_PWM_Start+0x138>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00e      	beq.n	80020ba <HAL_TIM_PWM_Start+0xfa>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d009      	beq.n	80020ba <HAL_TIM_PWM_Start+0xfa>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_TIM_PWM_Start+0x13c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_TIM_PWM_Start+0xfa>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_TIM_PWM_Start+0x140>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d111      	bne.n	80020de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	d010      	beq.n	80020ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020dc:	e007      	b.n	80020ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800

08002104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0202 	mvn.w	r2, #2
 8002130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fa6f 	bl	800262a <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fa62 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fa71 	bl	800263c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d122      	bne.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0204 	mvn.w	r2, #4
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fa45 	bl	800262a <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fa38 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fa47 	bl	800263c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0208 	mvn.w	r2, #8
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2204      	movs	r2, #4
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa1b 	bl	800262a <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa0e 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fa1d 	bl	800263c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b10      	cmp	r3, #16
 8002214:	d122      	bne.n	800225c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b10      	cmp	r3, #16
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0210 	mvn.w	r2, #16
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2208      	movs	r2, #8
 8002232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f9f1 	bl	800262a <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f9e4 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f9f3 	bl	800263c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0201 	mvn.w	r2, #1
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fade 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b80      	cmp	r3, #128	; 0x80
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b80      	cmp	r3, #128	; 0x80
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fce1 	bl	8002c76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f9b7 	bl	800264e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0220 	mvn.w	r2, #32
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fcac 	bl	8002c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800232a:	2302      	movs	r3, #2
 800232c:	e0ac      	b.n	8002488 <HAL_TIM_PWM_ConfigChannel+0x174>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0c      	cmp	r3, #12
 800233a:	f200 809f 	bhi.w	800247c <HAL_TIM_PWM_ConfigChannel+0x168>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	08002379 	.word	0x08002379
 8002348:	0800247d 	.word	0x0800247d
 800234c:	0800247d 	.word	0x0800247d
 8002350:	0800247d 	.word	0x0800247d
 8002354:	080023b9 	.word	0x080023b9
 8002358:	0800247d 	.word	0x0800247d
 800235c:	0800247d 	.word	0x0800247d
 8002360:	0800247d 	.word	0x0800247d
 8002364:	080023fb 	.word	0x080023fb
 8002368:	0800247d 	.word	0x0800247d
 800236c:	0800247d 	.word	0x0800247d
 8002370:	0800247d 	.word	0x0800247d
 8002374:	0800243b 	.word	0x0800243b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f9d0 	bl	8002724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0208 	orr.w	r2, r2, #8
 8002392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6999      	ldr	r1, [r3, #24]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	619a      	str	r2, [r3, #24]
      break;
 80023b6:	e062      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fa16 	bl	80027f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6999      	ldr	r1, [r3, #24]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	021a      	lsls	r2, r3, #8
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	619a      	str	r2, [r3, #24]
      break;
 80023f8:	e041      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fa5f 	bl	80028c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0208 	orr.w	r2, r2, #8
 8002414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0204 	bic.w	r2, r2, #4
 8002424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69d9      	ldr	r1, [r3, #28]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	61da      	str	r2, [r3, #28]
      break;
 8002438:	e021      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 faa9 	bl	8002998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69d9      	ldr	r1, [r3, #28]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	021a      	lsls	r2, r3, #8
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	61da      	str	r2, [r3, #28]
      break;
 800247a:	e000      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800247c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_TIM_ConfigClockSource+0x18>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e0b3      	b.n	8002610 <HAL_TIM_ConfigClockSource+0x180>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e0:	d03e      	beq.n	8002560 <HAL_TIM_ConfigClockSource+0xd0>
 80024e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e6:	f200 8087 	bhi.w	80025f8 <HAL_TIM_ConfigClockSource+0x168>
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	f000 8085 	beq.w	80025fc <HAL_TIM_ConfigClockSource+0x16c>
 80024f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f6:	d87f      	bhi.n	80025f8 <HAL_TIM_ConfigClockSource+0x168>
 80024f8:	2b70      	cmp	r3, #112	; 0x70
 80024fa:	d01a      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0xa2>
 80024fc:	2b70      	cmp	r3, #112	; 0x70
 80024fe:	d87b      	bhi.n	80025f8 <HAL_TIM_ConfigClockSource+0x168>
 8002500:	2b60      	cmp	r3, #96	; 0x60
 8002502:	d050      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x116>
 8002504:	2b60      	cmp	r3, #96	; 0x60
 8002506:	d877      	bhi.n	80025f8 <HAL_TIM_ConfigClockSource+0x168>
 8002508:	2b50      	cmp	r3, #80	; 0x50
 800250a:	d03c      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0xf6>
 800250c:	2b50      	cmp	r3, #80	; 0x50
 800250e:	d873      	bhi.n	80025f8 <HAL_TIM_ConfigClockSource+0x168>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d058      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x136>
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d86f      	bhi.n	80025f8 <HAL_TIM_ConfigClockSource+0x168>
 8002518:	2b30      	cmp	r3, #48	; 0x30
 800251a:	d064      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x156>
 800251c:	2b30      	cmp	r3, #48	; 0x30
 800251e:	d86b      	bhi.n	80025f8 <HAL_TIM_ConfigClockSource+0x168>
 8002520:	2b20      	cmp	r3, #32
 8002522:	d060      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x156>
 8002524:	2b20      	cmp	r3, #32
 8002526:	d867      	bhi.n	80025f8 <HAL_TIM_ConfigClockSource+0x168>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05c      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x156>
 800252c:	2b10      	cmp	r3, #16
 800252e:	d05a      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002530:	e062      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f000 faee 	bl	8002b22 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002554:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	609a      	str	r2, [r3, #8]
      break;
 800255e:	e04e      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f000 fad7 	bl	8002b22 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002582:	609a      	str	r2, [r3, #8]
      break;
 8002584:	e03b      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	461a      	mov	r2, r3
 8002594:	f000 fa4e 	bl	8002a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2150      	movs	r1, #80	; 0x50
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 faa5 	bl	8002aee <TIM_ITRx_SetConfig>
      break;
 80025a4:	e02b      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f000 fa6c 	bl	8002a90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2160      	movs	r1, #96	; 0x60
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fa95 	bl	8002aee <TIM_ITRx_SetConfig>
      break;
 80025c4:	e01b      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f000 fa2e 	bl	8002a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2140      	movs	r1, #64	; 0x40
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fa85 	bl	8002aee <TIM_ITRx_SetConfig>
      break;
 80025e4:	e00b      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f000 fa7c 	bl	8002aee <TIM_ITRx_SetConfig>
        break;
 80025f6:	e002      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025f8:	bf00      	nop
 80025fa:	e000      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a29      	ldr	r2, [pc, #164]	; (8002718 <TIM_Base_SetConfig+0xb8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00b      	beq.n	8002690 <TIM_Base_SetConfig+0x30>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d007      	beq.n	8002690 <TIM_Base_SetConfig+0x30>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a26      	ldr	r2, [pc, #152]	; (800271c <TIM_Base_SetConfig+0xbc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_Base_SetConfig+0x30>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a25      	ldr	r2, [pc, #148]	; (8002720 <TIM_Base_SetConfig+0xc0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <TIM_Base_SetConfig+0xb8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00b      	beq.n	80026c2 <TIM_Base_SetConfig+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d007      	beq.n	80026c2 <TIM_Base_SetConfig+0x62>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <TIM_Base_SetConfig+0xbc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d003      	beq.n	80026c2 <TIM_Base_SetConfig+0x62>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <TIM_Base_SetConfig+0xc0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d108      	bne.n	80026d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <TIM_Base_SetConfig+0xb8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d103      	bne.n	8002708 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	615a      	str	r2, [r3, #20]
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	40012c00 	.word	0x40012c00
 800271c:	40000400 	.word	0x40000400
 8002720:	40000800 	.word	0x40000800

08002724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f023 0201 	bic.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 0302 	bic.w	r3, r3, #2
 800276c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <TIM_OC1_SetConfig+0xc8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d10c      	bne.n	800279a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f023 0308 	bic.w	r3, r3, #8
 8002786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a13      	ldr	r2, [pc, #76]	; (80027ec <TIM_OC1_SetConfig+0xc8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d111      	bne.n	80027c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40012c00 	.word	0x40012c00

080027f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0210 	bic.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f023 0320 	bic.w	r3, r3, #32
 800283a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <TIM_OC2_SetConfig+0xd0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10d      	bne.n	800286c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <TIM_OC2_SetConfig+0xd0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d113      	bne.n	800289c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800287a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00

080028c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800290c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <TIM_OC3_SetConfig+0xd0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10d      	bne.n	800293e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800293c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <TIM_OC3_SetConfig+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d113      	bne.n	800296e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800294c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	621a      	str	r2, [r3, #32]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40012c00 	.word	0x40012c00

08002998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	031b      	lsls	r3, r3, #12
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <TIM_OC4_SetConfig+0x98>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d109      	bne.n	8002a0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00

08002a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f023 0201 	bic.w	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 030a 	bic.w	r3, r3, #10
 8002a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f023 0210 	bic.w	r2, r3, #16
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	031b      	lsls	r3, r3, #12
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	621a      	str	r2, [r3, #32]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f043 0307 	orr.w	r3, r3, #7
 8002b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b087      	sub	sp, #28
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	021a      	lsls	r2, r3, #8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	609a      	str	r2, [r3, #8]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2201      	movs	r2, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a1a      	ldr	r2, [r3, #32]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e046      	b.n	8002c4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d009      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10c      	bne.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800

08002c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <__libc_init_array>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	4d0c      	ldr	r5, [pc, #48]	; (8002cc0 <__libc_init_array+0x38>)
 8002c8e:	4c0d      	ldr	r4, [pc, #52]	; (8002cc4 <__libc_init_array+0x3c>)
 8002c90:	1b64      	subs	r4, r4, r5
 8002c92:	10a4      	asrs	r4, r4, #2
 8002c94:	42a6      	cmp	r6, r4
 8002c96:	d109      	bne.n	8002cac <__libc_init_array+0x24>
 8002c98:	f000 f822 	bl	8002ce0 <_init>
 8002c9c:	2600      	movs	r6, #0
 8002c9e:	4d0a      	ldr	r5, [pc, #40]	; (8002cc8 <__libc_init_array+0x40>)
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	; (8002ccc <__libc_init_array+0x44>)
 8002ca2:	1b64      	subs	r4, r4, r5
 8002ca4:	10a4      	asrs	r4, r4, #2
 8002ca6:	42a6      	cmp	r6, r4
 8002ca8:	d105      	bne.n	8002cb6 <__libc_init_array+0x2e>
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb0:	4798      	blx	r3
 8002cb2:	3601      	adds	r6, #1
 8002cb4:	e7ee      	b.n	8002c94 <__libc_init_array+0xc>
 8002cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cba:	4798      	blx	r3
 8002cbc:	3601      	adds	r6, #1
 8002cbe:	e7f2      	b.n	8002ca6 <__libc_init_array+0x1e>
 8002cc0:	08002d18 	.word	0x08002d18
 8002cc4:	08002d18 	.word	0x08002d18
 8002cc8:	08002d18 	.word	0x08002d18
 8002ccc:	08002d1c 	.word	0x08002d1c

08002cd0 <memset>:
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4402      	add	r2, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <memset+0xa>
 8002cd8:	4770      	bx	lr
 8002cda:	f803 1b01 	strb.w	r1, [r3], #1
 8002cde:	e7f9      	b.n	8002cd4 <memset+0x4>

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
